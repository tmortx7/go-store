// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: processvariable.sql

package db

import (
	"context"
	"database/sql"
)

const createProcessVariable = `-- name: CreateProcessVariable :one
INSERT INTO processvariables (
  name,
  alias,
  description
) VALUES (
  $1, $2, $3
) RETURNING id, name, alias, description, created_at
`

type CreateProcessVariableParams struct {
	Name        string         `json:"name"`
	Alias       string         `json:"alias"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateProcessVariable(ctx context.Context, arg CreateProcessVariableParams) (Processvariable, error) {
	row := q.db.QueryRowContext(ctx, createProcessVariable, arg.Name, arg.Alias, arg.Description)
	var i Processvariable
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Alias,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProcessVariable = `-- name: DeleteProcessVariable :exec
DELETE FROM processvariables
WHERE id = $1
`

func (q *Queries) DeleteProcessVariable(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProcessVariable, id)
	return err
}

const getProcessVariable = `-- name: GetProcessVariable :one
SELECT id, name, alias, description, created_at FROM processvariables
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProcessVariable(ctx context.Context, id int64) (Processvariable, error) {
	row := q.db.QueryRowContext(ctx, getProcessVariable, id)
	var i Processvariable
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Alias,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listProcessVariables = `-- name: ListProcessVariables :many
SELECT id, name, alias, description, created_at FROM processvariables
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProcessVariablesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProcessVariables(ctx context.Context, arg ListProcessVariablesParams) ([]Processvariable, error) {
	rows, err := q.db.QueryContext(ctx, listProcessVariables, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Processvariable{}
	for rows.Next() {
		var i Processvariable
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Alias,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
