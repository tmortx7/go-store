// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: instrumenttype.sql

package db

import (
	"context"
	"database/sql"
)

const createInstrumentType = `-- name: CreateInstrumentType :one
INSERT INTO instrumenttypes(
  type,
  alias,
  description
) VALUES (
  $1, $2, $3
) RETURNING id, type, alias, description, created_at
`

type CreateInstrumentTypeParams struct {
	Type        string         `json:"type"`
	Alias       string         `json:"alias"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateInstrumentType(ctx context.Context, arg CreateInstrumentTypeParams) (Instrumenttype, error) {
	row := q.db.QueryRowContext(ctx, createInstrumentType, arg.Type, arg.Alias, arg.Description)
	var i Instrumenttype
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Alias,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteInstrumentType = `-- name: DeleteInstrumentType :exec
DELETE FROM instrumenttypes
WHERE id = $1
`

func (q *Queries) DeleteInstrumentType(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteInstrumentType, id)
	return err
}

const getInstrumentType = `-- name: GetInstrumentType :one
SELECT id, type, alias, description, created_at FROM instrumenttypes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetInstrumentType(ctx context.Context, id int64) (Instrumenttype, error) {
	row := q.db.QueryRowContext(ctx, getInstrumentType, id)
	var i Instrumenttype
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Alias,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listInstrumentTypes = `-- name: ListInstrumentTypes :many
SELECT id, type, alias, description, created_at FROM instrumenttypes
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListInstrumentTypesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListInstrumentTypes(ctx context.Context, arg ListInstrumentTypesParams) ([]Instrumenttype, error) {
	rows, err := q.db.QueryContext(ctx, listInstrumentTypes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Instrumenttype{}
	for rows.Next() {
		var i Instrumenttype
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Alias,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
